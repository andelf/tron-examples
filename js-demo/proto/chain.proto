// TRON protocol, transaction part, all in one.

syntax = "proto3";

package chain;

import "google/protobuf/any.proto";

enum ContractType {
  reserved 21, 22, 23;
  reserved "BuyStorageContract", "BuyStorageBytesContract",
      "SellStorageContract";
  // NOTE: unused or deprecated
  // BuyStorageContract = 21;
  // BuyStorageBytesContract = 22;
  // SellStorageContract = 23;
  AccountCreateContract = 0;
  TransferContract = 1;
  TransferAssetContract = 2;
  // NOTE: only used in active permission bits.
  OBSOLETE_VoteAssetContract = 3;
  VoteWitnessContract = 4;
  WitnessCreateContract = 5;
  AssetIssueContract = 6;
  WitnessUpdateContract = 8;
  ParticipateAssetIssueContract = 9;
  AccountUpdateContract = 10;
  FreezeBalanceContract = 11;
  UnfreezeBalanceContract = 12;
  WithdrawBalanceContract = 13;
  UnfreezeAssetContract = 14;
  UpdateAssetContract = 15;
  ProposalCreateContract = 16;
  ProposalApproveContract = 17;
  ProposalDeleteContract = 18;
  SetAccountIdContract = 19;
  // NOTE: only used in active permission bits.
  OBSOLETE_CustomContract = 20;
  CreateSmartContract = 30;
  TriggerSmartContract = 31;
  // NOTE: only used in active permission bits.
  OBSOLETE_GetContract = 32;
  UpdateSettingContract = 33;
  ExchangeCreateContract = 41;
  ExchangeInjectContract = 42;
  ExchangeWithdrawContract = 43;
  ExchangeTransactionContract = 44;
  UpdateEnergyLimitContract = 45;
  AccountPermissionUpdateContract = 46;
  ClearABIContract = 48;
  UpdateBrokerageContract = 49;
  // NOTE: only used in active permission bits.
  OBSOLETE_ShieldedTransferContract = 51;
}

message AccountId {
  bytes name = 1;
  bytes address = 2;
}

message Authority {
  AccountId account = 1;
  bytes permission_name = 2;
}

message Transaction {
  message Contract {
    ContractType type = 1;
    google.protobuf.Any parameter = 2;
    bytes provider = 3;
    // renamed: ContractName
    bytes contract_name = 4;
    // renamed: Permission_id
    int32 permission_id = 5;
  }

  message Result {
    reserved "constant_result";
    // renamed: code
    enum Status {
      SUCESS = 0;
      FAILED = 1;
    }
    // renamed: contractResult
    enum ContractStatus {
      DEFAULT = 0;
      SUCCESS = 1;
      // Used by CreatSmartContract and TriggerSmartContract
      REVERT = 2;
      ILLEGAL_OPERATION = 8;
      OUT_OF_TIME = 11;
      OUT_OF_ENERGY = 10;
      TRANSFER_FAILED = 14;
      // Maybe not used
      BAD_JUMP_DESTINATION = 3;
      OUT_OF_MEMORY = 4;
      PRECOMPILED_CONTRACT = 5;
      STACK_TOO_SMALL = 6;
      STACK_TOO_LARGE = 7;
      STACK_OVERFLOW = 9;
      JVM_STACK_OVER_FLOW = 12;
      UNKNOWN = 13;
    }

    int64 fee = 1;
    // renamed: ret
    // NOTE: Actually not used. Always = 0
    Status status = 2;
    // renamed: contractRet
    ContractStatus contract_status = 3;

    // renamed: assetIssueID
    string asset_issue_id = 14;
    int64 withdraw_amount = 15;
    int64 unfreeze_amount = 16;
    int64 exchange_received_amount = 18;
    int64 exchange_inject_another_amount = 19;
    int64 exchange_withdraw_another_amount = 20;
    int64 exchange_id = 21;
    int64 shielded_transaction_fee = 22;
  }

  message Raw {
    bytes ref_block_bytes = 1;
    int64 ref_block_num = 3;
    bytes ref_block_hash = 4;
    // max = now + 86400_000
    int64 expiration = 8;
    repeated Authority auths = 9;
    // used as transaction memo
    // max size = 512000
    bytes data = 10;
    // only support size = 1, repeated list here for extension
    // changed: from repeated to optional(default for proto3)
    Contract contract = 11;
    // scripts not used
    bytes scripts = 12;
    int64 timestamp = 14;
    int64 fee_limit = 18;
  }

  Raw raw_data = 1;
  // normally size = 1, repeated list here for multi-sig extension
  repeated bytes signatures = 2;
  // renamed: ret
  // NOTE: Many malformed transactions with len(result) = 2.
  // NOTE: Cannot make it a non-repeated, since only last will be returned,
  // while the first is the actual result.
  repeated Result result = 5;
}

// sub fields for builtin contracts

enum ResourceCode {
  BANDWIDTH = 0x00;
  ENERGY = 0x01;
}

enum AccountType {
  Normal = 0;
  AssetIssue = 1;
  Contract = 2;
}

message Vote {
  bytes vote_address = 1;
  int64 vote_count = 2;
}

message SmartContract {
  message ABI {
    enum EntryType {
      UnknownEntryType = 0;
      Constructor = 1;
      Function = 2;
      Event = 3;
      // Fallback functions are executed whenever a particular contract receives
      // plain Ether without any other data associated with the transaction.
      Fallback = 4;
    }
    message Param {
      // This will cause the respective arguments to be searched for.
      // If arrays (including string and bytes) are used as indexed arguments,
      // the Keccak-256 hash of it is stored as topic instead.
      bool indexed = 1;
      string name = 2;
      string type = 3;
      // SolidityType type = 3;
    }
    enum StateMutabilityType {
      UnknownStateMutabilityType = 0;
      // With pure you cannot access the contract storage.
      // e.g. utility libraries.
      Pure = 1;
      // With view you cannot modify the contract storage, but you can access
      // the storage. e.g. contract getters.
      View = 2;
      Nonpayable = 3;
      Payable = 4;
    }
    message Entry {
      // The event was declared as `anonymous`
      bool anonymous = 1;
      // Replaced by view and pure.
      bool constant = 2;
      string name = 3;
      repeated Param inputs = 4;
      repeated Param outputs = 5;
      EntryType type = 6;
      bool payable = 7;
      StateMutabilityType state_mutability = 8;
    }
    // renamed: entrys
    repeated Entry entries = 1;
  }

  bytes origin_address = 1;
  bytes contract_address = 2;
  ABI abi = 3;
  bytes bytecode = 4;
  int64 call_value = 5;
  int64 consume_user_resource_percent = 6;
  string name = 7;
  int64 origin_energy_limit = 8;
  bytes code_hash = 9;
  // When smart contract is created by a trigger smart contract call.
  // renamed: trx_hash
  bytes txn_id = 10;
}
