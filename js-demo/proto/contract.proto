// TRON protocol, transaction part, all in one.

syntax = "proto3";

package contract;

// sub fields for builtin contracts

enum ResourceCode {
  BANDWIDTH = 0x00;
  ENERGY = 0x01;
}

enum AccountType {
  Normal = 0;
  AssetIssue = 1;
  Contract = 2;
}

message Vote {
  bytes vote_address = 1;
  int64 vote_count = 2;
}

message SmartContract {
  message ABI {
    enum EntryType {
      UnknownEntryType = 0;
      Constructor = 1;
      Function = 2;
      Event = 3;
      // Fallback functions are executed whenever a particular contract receives
      // plain Ether without any other data associated with the transaction.
      Fallback = 4;
    }
    message Param {
      // This will cause the respective arguments to be searched for.
      // If arrays (including string and bytes) are used as indexed arguments,
      // the Keccak-256 hash of it is stored as topic instead.
      bool indexed = 1;
      string name = 2;
      string type = 3;
      // SolidityType type = 3;
    }
    enum StateMutabilityType {
      UnknownStateMutabilityType = 0;
      // With pure you cannot access the contract storage.
      // e.g. utility libraries.
      Pure = 1;
      // With view you cannot modify the contract storage, but you can access
      // the storage. e.g. contract getters.
      View = 2;
      Nonpayable = 3;
      Payable = 4;
    }
    message Entry {
      // The event was declared as `anonymous`
      bool anonymous = 1;
      // Replaced by view and pure.
      bool constant = 2;
      string name = 3;
      repeated Param inputs = 4;
      repeated Param outputs = 5;
      EntryType type = 6;
      bool payable = 7;
      StateMutabilityType state_mutability = 8;
    }
    // renamed: entrys
    repeated Entry entries = 1;
  }

  bytes origin_address = 1;
  bytes contract_address = 2;
  ABI abi = 3;
  bytes bytecode = 4;
  int64 call_value = 5;
  int64 consume_user_resource_percent = 6;
  string name = 7;
  int64 origin_energy_limit = 8;
  bytes code_hash = 9;
  // When smart contract is created by a trigger smart contract call.
  // renamed: trx_hash
  bytes txn_id = 10;
}

message Permission {
  enum PermissionType {
    Owner = 0;
    Witness = 1;
    Active = 2;
  }
  message Key {
    bytes address = 1;
    int64 weight = 2;
  }

  PermissionType type = 1;
  // Owner id=0, Witness id=1, Active id starts by 2
  int32 id = 2;
  string name = 3;
  int64 threshold = 4;
  int32 parent_id = 5;
  // 1 bit for 1 contract type
  bytes operations = 6;
  repeated Key keys = 7;
}

// * builtin contracts

message AccountCreateContract {
  bytes owner_address = 1;
  bytes account_address = 2;
  AccountType type = 3;
}

// Update account name. Account name is not unique now.
message AccountUpdateContract {
  // max len = 200
  // changed: bytes
  string account_name = 1;
  bytes owner_address = 2;
}

// Set account id if the account has no id. Account id is unique and case
// insensitive.
message SetAccountIdContract {
  bytes account_id = 1;
  bytes owner_address = 2;
}

message AccountPermissionUpdateContract {
  bytes owner_address = 1;
  // permission_id = 0
  Permission owner = 2;
  // permission_id = 1
  Permission witness = 3;
  // permission_id = 2, 3, 4, ...
  repeated Permission actives = 4;
}

// # TRX transfer

message TransferContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  int64 amount = 3;
}

// # TRC10

message TransferAssetContract {
  // this field is token name before the proposal ALLOW_SAME_TOKEN_NAME's
  // activation, otherwise it is token id and token should be in string format.
  // used as asset id str as bytes, LEN = 7 bytes: 100xx
  // changed: bytes
  bytes owner_address = 2;
  bytes to_address = 3;
  string asset_name = 1;
  int64 amount = 4;
}

message AssetIssueContract {
  message FrozenSupply {
    int64 frozen_amount = 1;
    int64 frozen_days = 2;
  }
  bytes owner_address = 1;
  // changed: bytes
  string name = 2;
  // changed: bytes
  string abbr = 3;
  int64 total_supply = 4;
  repeated FrozenSupply frozen_supply = 5;
  int32 trx_num = 6;
  int32 precision = 7;
  int32 num = 8;
  int64 start_time = 9;
  int64 end_time = 10;
  // NOTE: might be illegal utf8 bytes
  bytes description = 20;
  // changed: bytes
  string url = 21;
  // NOTE: rename net to bandwidth
  int64 free_asset_bandwidth_limit = 22;
  int64 public_free_asset_bandwidth_limit = 23;
  int64 public_free_asset_bandwidth_usage = 24;
  // useless, and not checked
  int64 OBSOLETE_public_latest_free_net_time = 25;
  string OBSOLETE_id = 41;
  int64 OBSOLETE_order = 11;
  int32 OBSOLETE_vote_score = 16;
}

message ParticipateAssetIssueContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  // this field is token name before the proposal ALLOW_SAME_TOKEN_NAME's
  // activation, otherwise it is token id and token should be in string format.
  //
  // changed: bytes
  string asset_name = 3;
  int64 amount = 4; // the amount of drops
}

/* NOTE: unused
message VoteAssetContract {
  bytes owner_address = 1;
  repeated bytes vote_address = 2;
  // renamed: support
  bool is_support = 3;
  int32 count = 5;
}
*/

message UpdateAssetContract {
  bytes owner_address = 1;
  bytes description = 2;
  bytes url = 3;
  int64 new_limit = 4;
  int64 new_public_limit = 5;
}

message UnfreezeAssetContract { bytes owner_address = 1; }

// # Witness

message WitnessCreateContract {
  bytes owner_address = 1;
  bytes url = 2;
}

message WitnessUpdateContract {
  bytes owner_address = 1;
  bytes update_url = 12;
}

message UpdateBrokerageContract {
  bytes owner_address = 1;
  int32 brokerage = 2; // in percent
}

message VoteWitnessContract {
  bytes owner_address = 1;
  repeated Vote votes = 2;
  // not used
  bool is_support = 3;
}

message WithdrawBalanceContract { bytes owner_address = 1; }

// # Smart Contract

message CreateSmartContract {
  bytes owner_address = 1;
  SmartContract new_contract = 2;
  int64 call_token_value = 3;
  int64 call_token_id = 4;
}

message TriggerSmartContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
  int64 call_value = 3;
  bytes data = 4;
  int64 call_token_value = 5;
  int64 call_token_id = 6;
}

message UpdateSettingContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
  int64 consume_user_resource_percent = 3;
}

message UpdateEnergyLimitContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
  int64 origin_energy_limit = 3;
}

message ClearABIContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
}

// # Resource

message FreezeBalanceContract {
  bytes owner_address = 1;
  int64 frozen_balance = 2;
  int64 frozen_duration = 3;

  ResourceCode resource = 10;
  bytes receiver_address = 15;
}

message UnfreezeBalanceContract {
  bytes owner_address = 1;
  ResourceCode resource = 10;
  bytes receiver_address = 15;
}

// # Proposal

message ProposalCreateContract {
  bytes owner_address = 1;
  map<int64, int64> parameters = 2;
}

message ProposalApproveContract {
  bytes owner_address = 1;
  int64 proposal_id = 2;
  // renamed: is_add_approval
  bool is_approval = 3;
}

message ProposalDeleteContract {
  bytes owner_address = 1;
  int64 proposal_id = 2;
}

// # Exchange

message ExchangeCreateContract {
  bytes owner_address = 1;
  bytes first_token_id = 2;
  int64 first_token_balance = 3;
  bytes second_token_id = 4;
  int64 second_token_balance = 5;
}

message ExchangeInjectContract {
  bytes owner_address = 1;
  int64 exchange_id = 2;
  bytes token_id = 3;
  int64 quant = 4;
}

message ExchangeWithdrawContract {
  bytes owner_address = 1;
  int64 exchange_id = 2;
  bytes token_id = 3;
  int64 quant = 4;
}

message ExchangeTransactionContract {
  bytes owner_address = 1;
  int64 exchange_id = 2;
  bytes token_id = 3;
  int64 quant = 4;
  int64 expected = 5;
}